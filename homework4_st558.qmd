---
title: "HW4_ST558_Jia Lu"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Task 1: Conceptual Questions

1.  What is the purpose of the lapply() function? What is the equivalent purrr function?

-   A: We use lapply() to apply function to lists. lapply() also returns a list. The equivalent purrr function is map().

2.  Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = "kendall") on each element of the list. Write code to do this below! (Iâ€™m really trying to ask you how you specify method = "kendall" when calling lapply())

-   A: lapply(my_list, function(x) cor(x, method = "kendall"))

3.  What are two advantages of using purrr functions instead of the BaseR apply family?

-   A: The main advantages of using purr functions instead of the BaseR apply family is more consistency and some helper functions.

4.  What is a side-effect function?

-   A: Side-effect function modify some state but don't naturally return the modified argument, such as print(), write_csv(). 

5.  Why can you name a variable sd in a function and not cause any issues with the sd function?

-   A: When you call a function, it creates temporary function environments. This is why variable in functions don't exist outside the function.

# Task 2 - Writing R Functions

1. Write a basic function (call it getRMSE()) that takes in a vector of responses and a vector of predictions and outputs the RMSE.

```{r}
#write a function using the RMSE formula with additional argument in mean function to removes the NA values in the computation
getRMSE <- function(resp, pred, ...){
  mean <- mean(sum((resp - pred)^2, ...), ...)
  RMSE <- sqrt(mean)
  return(RMSE)
}
```


2. Run the following code to create some response values and predictions.

- Test the RMSE function using this data.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
#supply the above resp and pred vectors in the getRMSE function with response_vector=resp and prediction_vector=pred
getRMSE(resp, pred)
```

- Test the RMSE function with and without specifying the behavior to deal with missing values.

```{r}
#create a new vector by replacing the 99th and 100th element in x with NA
x_with_na <- x
x_with_na[99:100] <- NA_real_
x_with_na
#calculate respective response and prediction value with x_with_na
resp <- 3 + 10*x_with_na + rnorm(n)
pred <- predict(lm(resp ~ x_with_na), data.frame(x_with_na))

#supply the getRMSE function without or with specifying the behavior to delete NA values and test on the response and prediction values with x2 which has two NA values
#it returns NA when supplying the getRMSE function without specifying na.rm argument
getRMSE(resp, pred)
#it returns the calculated value when supplying the getRMSE function with na.rm=TRUE
getRMSE(resp, pred, na.rm = TRUE)
```

3. Write a function called getMAE() that follows the specifications of the getRMSE() function.

```{r}
getMAE <- function(resp, pred, ...){
  MAE <- mean(sum(abs(resp - pred), ...), ...)
  return(MAE)
}
```

4. Run the following code to create some response values and predictions.

- Test the MAE function using this data.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
#supply the above resp and pred vectors in the getMAE function with response_vector=resp and prediction_vector=pred
getMAE(resp, pred)
```

- Test the MAE function with and without specifying the behavior to deal with missing values.

```{r}
#create a new vector by replacing the 99th and 100th element in x with NA
x_with_na <- x
x_with_na[99:100] <- NA_real_
x_with_na
#calculate respective response and prediction value with x_with_na
resp <- 3 + 10*x_with_na + rnorm(n)
pred <- predict(lm(resp ~ x_with_na), data.frame(x_with_na))
#supply the getMAE function without or with specifying the behavior to delete NA values and test on the response and prediction values with x2 which has two NA values
#it returns NA when supplying the getRMSE function without specifying na.rm argument
getMAE(resp, pred)
#it returns the calculated value when supplying the getMAE function with na.rm=TRUE
getMAE(resp, pred, na.rm = TRUE)
```

5. Create a wrapper function that can be used to get either or both metrics returned with a single
function call. 

```{r}
wrapper <- function(resp, pred, metrics, ...){
  if (!is.vector(resp) | !is.atomic(resp) | !is.numeric(resp) | !is.vector(pred) | !is.atomic(pred) | !is.numeric(pred)) {
    stop("Not a vector or not atomic or not numeric my friend")
  } else if (metrics == "RMSE"){
    RMSE <- getRMSE(resp, pred, ...)
    attributes(RMSE)$names <- "RMSE"
    return(RMSE)
    
  } else if (metrics == "MAE") {
    MAE <- getMAE(resp, pred, ...)
    attributes(MAE)$names <- "MAE"
    return(MAE)
  } else if (metrics == "both"){
    RMSE <- getRMSE(resp, pred, ...)
    attributes(RMSE)$names <- "RMSE"
    MAE <- getMAE(resp, pred, ...)
    attributes(MAE)$names <- "MAE"
    return(list(RMSE, MAE))
  }
}
  
```

6. Run the following code to create some response values and predictions.

- Test the new function using this data.

```{r}
set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))
#call the wrapper function with metrics = "RMSE" and the output is generated according to the request
wrapper(resp, pred, metrics = "RMSE")
#call the wrapper function with metrics = "MAE" and the output is generated according to the request
wrapper(resp, pred, metrics = "MAE")
#call the wrapper function with metrics = "both" and the output is generated according to the request
wrapper(resp, pred, metrics = "both")
```

- Repeat with replacing two of the response values with missing values (NA_real_).

```{r}
#create a new vector by replacing the 99th and 100th element in x with NA
x_with_na <- x
x_with_na[99:100] <- NA_real_
x_with_na
#calculate respective response and prediction value with x_with_na
resp <- 3 + 10*x_with_na + rnorm(n)
pred <- predict(lm(resp ~ x_with_na), data.frame(x_with_na))
#call the wrapper function with metrics = "RMSE" without specifying na.rm argument and the output NA is generated
wrapper(resp, pred, metrics = "RMSE")
#call the wrapper function with metrics = "MAE" without specifying na.rm argument and the output NA is generated
wrapper(resp, pred, metrics = "MAE")
#call the wrapper function with metrics = "both" without specifying na.rm argument and the output NA is generated
wrapper(resp, pred, metrics = "both")

#call the wrapper function with metrics = "RMSE" and the output is generated according to the request
wrapper(resp, pred, metrics = "RMSE", na.rm = TRUE)
#call the wrapper function with metrics = "MAE" and the output is generated according to the request
wrapper(resp, pred, metrics = "MAE", na.rm = TRUE)
#call the wrapper function with metrics = "both" and the output is generated according to the request
wrapper(resp, pred, metrics = "both", na.rm = TRUE)
```

- Finally, I tested my function by passing it data frames. I stored both resp and pred vectors as data frames, and passed them into this function. It shows the error message I wrote in the function in the output, suggesting that the incorrect data were passed on. 

```{r, error=TRUE}
resp_df <- as.data.frame(resp)
pred_df <- as.data.frame(pred)
#call the wrapper function with metrics = "RMSE" without specifying na.rm argument and the output shows the error message
wrapper(resp_df, pred_df, metrics = "RMSE")
```

```{r, error=TRUE}
#call the wrapper function with metrics = "MAE" without specifying na.rm argument and the output shows the error message
wrapper(resp_df, pred_df, metrics = "MAE")
```

```{r, error=TRUE}
#call the wrapper function with metrics = "both" without specifying na.rm argument and the output shows the error message
wrapper(resp_df, pred_df, metrics = "both")
```

# Task 3 - Querying an API and a Tidy-Style Function

1. After registered for the website newsapi.org, I got a key for this website. I dissected the URL into several parts: base URL, subject query, time period to search from, and the api key supplied. I then supplemented the subject query and time period that I am interested in, as well as the api key that I have. Then I used GET() from the httr package to return information about this topic and stored the result as news_return.

```{r}
library(jsonlite)

base_URL <- "https://newsapi.org/v2/everything"

URL_code_subject_query <- "?q="
URL_code_time_period <- "&from="
URL_code_api_key <- "&apikey="

subject_query <- "Jerome%20Powell"
time_period <- "2024-06-20"
api_key <- "0eca322394b24a1786944625148c3767"

URL <- paste0(base_URL, URL_code_subject_query, subject_query, URL_code_time_period, time_period, URL_code_api_key, api_key)
URL

news_return <- httr::GET(URL)
```

2. I used str() to see the structure of news_return I then parsed news_return with the data frame news_return$content and checked the structure of it as well. I found that the 3rd element of this list, articles, has the actual article information in it. Therefore, I stored all the information from it into as a tibble using tidyverse package. 

```{r}
library(tidyverse)

str(news_return, max.level = 1)
parsed_news <- fromJSON(rawToChar((news_return$content)))
str(parsed_news)

#the first column of parsed_news$articles is a list column
typeof(parsed_news$articles[,1])
#this list column contains two element "id" and "name"
str(parsed_news$articles$source)

news_articles <- as_tibble(parsed_news$articles)

#create new two columns id and name from source and delete the source column
news_articles <- news_articles |>
  mutate(id = news_articles$source$id,
         name = news_articles$source$name) |>
  select(id, name, everything(), -source)
news_articles
```

3. I wrote a quick function that allows the user to easily query this API. The inputs to the function are the subject to search for (string), a time period to search from, and an API.

```{r}
query_API <- function(subject_query, time_period, api_key){
  library(jsonlite)
  library(tidyverse)

#create a URL to query the API  
  base_URL <- "https://newsapi.org/v2/everything"
  
  URL_code_subject_query <- "?q="
  URL_code_time_period <- "&from="
  URL_code_api_key <- "&apikey="
  
  URL <- paste0(base_URL, URL_code_subject_query, subject_query, URL_code_time_period, time_period, URL_code_api_key, api_key)

#read in and store data with jsonlite and tidyverse packages
  news_return <- httr::GET(URL)
  parsed_news <- fromJSON(rawToChar((news_return$content)))
  news_articles <- as_tibble(parsed_news$articles)

#construct a new tibble with columns id and name and everything else excluding the source column
  news_articles <- news_articles |>
    mutate(id = news_articles$source$id,
           name = news_articles$source$name) |>
    select(id, name, everything(), -source)
  news_articles
}
#I then used this function twice with different query subjects and time period to search, but unique api key. 
#here, I supplied subject_query="federal%20reserve", time_period="2024-06-23", api_key="0eca322394b24a1786944625148c3767" 
query_API("federal%20reserve", "2024-05-24", "0eca322394b24a1786944625148c3767")
#here, I supplied subject_query="quantitative%20tightening", time_period= "2024-06-10", api_key="0eca322394b24a1786944625148c3767" 
query_API("quantitative%20tightening", "2024-06-10", "0eca322394b24a1786944625148c3767")
```

